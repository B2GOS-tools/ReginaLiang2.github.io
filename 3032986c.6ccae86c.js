(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{139:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(8),o=(n(0),n(396)),s={id:"operation",title:"DataStoreTask.operation"},i={unversionedId:"06.api/web-apis/dataStore/datastoretask/operation",id:"06.api/web-apis/dataStore/datastoretask/operation",isDocsHomePage:!1,title:"DataStoreTask.operation",description:"The operation read-only property of the DataStoreTask interface returns the type of operation that represents the current change that has been made to the data store.",source:"@site/docs/06.api/web-apis/dataStore/datastoretask/operation.md",slug:"/06.api/web-apis/dataStore/datastoretask/operation",permalink:"/docs/06.api/web-apis/dataStore/datastoretask/operation",version:"current"},c=[{value:"Syntax",id:"syntax",children:[{value:"Value",id:"value",children:[]}]},{value:"Example",id:"example",children:[]}],p={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The operation read-only property of the DataStoreTask interface returns the type of operation that represents the current change that has been made to the data store."),Object(o.b)("h2",{id:"syntax"},"Syntax"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"myOperation = task.operation;\n")),Object(o.b)("h3",{id:"value"},"Value"),Object(o.b)("p",null,"A DataStoreOperation (see Operation types)."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"In the following example, we use navigator.getDataStores to return a list of DataStore objects representing data stores on the device called contacts. Since there is only one such data store, we can access it inside the outer promise using stores","[0]",". The next promise uses DataStore.getLength() to return the number of records in the store. If the value is 0, we populate the data store with records contained in the contactsInit object; if there is already data in the store, we run DataStore.sync() to create a DataStoreCursor object allowing us to loop through any additions since the code last accessed the data store and update the data display as necessary."),Object(o.b)("p",null,"The cursor is passed to the runNextTask() function, which calls DataStoreCursor.next() to start the process of managing the next task \u2014 the resulting DataStoreTask object is passed to the manageTask() function to work out what to do with it. runNextTask() is then called repeatedly by manageTask() until the cursor has finished working through all the records."),Object(o.b)("p",null,"In each case, task.operation is checked to see what type each task is, then appropriate action is taken."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"navigator.getDataStores('contacts').then(function(stores) {\n  stores[0].getLength().then(function(storeLength) {\n    if(storeLength == 0) {\n        for(i = 0; i < contactsInit.length; i++) {\n        addContact(stores[0],contactsInit[i]);  \n      };\n    } else {\n      var cursor = stores[0].sync();\n      runNextTask(cursor);\n    }\n  });\n});\n\nfunction runNextTask(cursor) {\n  cursor.next().then(function(task) {\n    manageTask(cursor, task);\n  });\n}\n\nfunction manageTask(cursor, task) {\n  if (task.operation == 'done') {\n    // Finished adding contacts!\n    return;\n  }\n\n  if (task.operation == 'add') {\n    // Add the contacts that are different to how it was before\n    displayExisting(task.id, task.data);\n  }\n\n  runNextTask(cursor);\n}\n")))}u.isMDXComponent=!0},396:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),u=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(n),h=a,f=l["".concat(s,".").concat(h)]||l[h]||d[h]||o;return n?r.a.createElement(f,i(i({ref:t},p),{},{components:n})):r.a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);