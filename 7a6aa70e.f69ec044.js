(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{227:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(8),o=(n(0),n(396)),c={id:"mediasource",title:"MediaSource"},i={unversionedId:"06.api/web-apis/mediasource/mediasource",id:"06.api/web-apis/mediasource/mediasource",isDocsHomePage:!1,title:"MediaSource",description:"Description",source:"@site/docs/06.api/web-apis/mediasource/mediasource.md",slug:"/06.api/web-apis/mediasource/mediasource",permalink:"/docs/06.api/web-apis/mediasource/mediasource",version:"current"},b=[{value:"Description",id:"description",children:[]},{value:"Properties",id:"properties",children:[]},{value:"EventHandler",id:"eventhandler",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Static methods",id:"static-methods",children:[]},{value:"Examples",id:"examples",children:[]}],p={rightToc:b};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"MediaSource")," interface of the ",Object(o.b)("inlineCode",{parentName:"p"},"Media Source Extensions API")," represents a source of media data for an ",Object(o.b)("inlineCode",{parentName:"p"},"HTMLMediaElement")," object. A MediaSource object can be attached to a ",Object(o.b)("inlineCode",{parentName:"p"},"HTMLMediaElement")," to be played in the user agent."),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.sourceBuffers")),Object(o.b)("br",{parentName:"p"}),"\n","Returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.activeSourceBuffers")),Object(o.b)("br",{parentName:"p"}),"\n","Returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within MediaSource.sourceBuffers \u2014 the list of objects providing the selected video track,  enabled audio tracks, and shown/hidden text tracks.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.readyState")),Object(o.b)("br",{parentName:"p"}),"\n","Returns an enum representing the state of the current MediaSource, whether it is not currently attached to a media element (closed), attached and ready to receive SourceBuffer objects (open), or attached but the stream has been ended via MediaSource.endOfStream() (ended.)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.duration")),Object(o.b)("br",{parentName:"p"}),"\n","Gets and sets the duration of the current media being presented."))),Object(o.b)("h2",{id:"eventhandler"},"EventHandler"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.onsourceclose")),Object(o.b)("br",{parentName:"p"}),"\n","The event handler for the sourceclose event.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.onsourceended")),Object(o.b)("br",{parentName:"p"}),"\n","The event handler for the sourceended event.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.onsourceopen")),Object(o.b)("br",{parentName:"p"}),"\n","The event handler for the sourceopen event."))),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("p",null,"Inherits methods from its parent interface, EventTarget."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.addSourceBuffer()")),Object(o.b)("br",{parentName:"p"}),"\n","Creates a new SourceBuffer of the given MIME type and adds it to the MediaSource.sourceBuffers list.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.removeSourceBuffer()")),Object(o.b)("br",{parentName:"p"}),"\n","Removes the given SourceBuffer from the MediaSource.sourceBuffers list.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.endOfStream()")),Object(o.b)("br",{parentName:"p"}),"\n","Signals the end of the stream.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.setLiveSeekableRange()")),Object(o.b)("br",{parentName:"p"}),"\n","Sets the range that the user can seek to in the media element.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.clearLiveSeekableRange()")),Object(o.b)("br",{parentName:"p"}),"\n","Clears the live seekable range."))),Object(o.b)("h2",{id:"static-methods"},"Static methods"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"MediaSource.isTypeSupported()")),Object(o.b)("br",{parentName:"li"}),"Returns a Boolean value indicating if the given MIME type is supported by the current user agent \u2014 this is, if it can successfully create SourceBuffer objects for that MIME type.")),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("p",null,"The following simple example loads a video with XMLHttpRequest, playing it as soon as it can. This example was written by Nick Desaulniers and can be viewed live here (you can also download the source for further investigation.)"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var video = document.querySelector('video');\n\nvar assetURL = 'frag_bunny.mp4';\n// Need to be specific for Blink regarding codecs\n// ./mp4info frag_bunny.mp4 | grep Codec\nvar mimeCodec = 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"';\n\nif ('MediaSource' in window && MediaSource.isTypeSupported(mimeCodec)) {\n  var mediaSource = new MediaSource();\n  //console.log(mediaSource.readyState); // closed\n  video.src = URL.createObjectURL(mediaSource);\n  mediaSource.addEventListener('sourceopen', sourceOpen);\n} else {\n  console.error('Unsupported MIME type or codec: ', mimeCodec);\n}\n\nfunction sourceOpen (_) {\n  //console.log(this.readyState); // open\n  var mediaSource = this;\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);\n  fetchAB(assetURL, function (buf) {\n    sourceBuffer.addEventListener('updateend', function (_) {\n      mediaSource.endOfStream();\n      video.play();\n      //console.log(mediaSource.readyState); // ended\n    });\n    sourceBuffer.appendBuffer(buf);\n  });\n};\n\nfunction fetchAB (url, cb) {\n  console.log(url);\n  var xhr = new XMLHttpRequest;\n  xhr.open('get', url);\n  xhr.responseType = 'arraybuffer';\n  xhr.onload = function () {\n    cb(xhr.response);\n  };\n  xhr.send();\n};\n")))}s.isMDXComponent=!0},396:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},l=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=b(e,["components","mdxType","originalType","parentName"]),u=s(n),l=r,m=u["".concat(c,".").concat(l)]||u[l]||d[l]||o;return n?a.a.createElement(m,i(i({ref:t},p),{},{components:n})):a.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=l;var i={};for(var b in t)hasOwnProperty.call(t,b)&&(i[b]=t[b]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=n[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"}}]);