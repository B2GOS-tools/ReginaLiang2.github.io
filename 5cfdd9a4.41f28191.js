(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{193:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return d})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(8),o=(a(0),a(396)),i={id:"datastorechangeevent",title:"DataStoreChangeEvent"},c={unversionedId:"06.api/web-apis/dataStore/datastorechangeevent",id:"06.api/web-apis/dataStore/datastorechangeevent",isDocsHomePage:!1,title:"DataStoreChangeEvent",description:"Description",source:"@site/docs/06.api/web-apis/dataStore/datastorechangeevent.md",slug:"/06.api/web-apis/dataStore/datastorechangeevent",permalink:"/docs/06.api/web-apis/dataStore/datastorechangeevent",version:"current"},d=[{value:"Description",id:"description",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Example",id:"example",children:[]},{value:"Operation types",id:"operation-types",children:[]}],b={rightToc:d};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"The DataStoreChangeEvent interface of the Data Store API represents the event related to a record changed in the data store, i.e. this is returned once a change is made and the change event is fired (see DataStore.onchange for the handler)."),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/06.api/web-apis/dataStore/datastorechangeevent/id"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"DataStoreChangeEvent.id")))," ",Object(o.b)("inlineCode",{parentName:"li"},"read-only"),Object(o.b)("br",{parentName:"li"}),"Returns the identifier of the changed record in the data store. Must return null if the operation is cleared."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/06.api/web-apis/dataStore/datastorechangeevent/operation"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"DataStoreChangeEvent.operation")))," ",Object(o.b)("inlineCode",{parentName:"li"},"read-only"),Object(o.b)("br",{parentName:"li"}),"Returns the type of operation that represents the current change that has been made to the data store."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/06.api/web-apis/dataStore/datastorechangeevent/owner"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"DataStoreChangeEvent.owner")))," ",Object(o.b)("inlineCode",{parentName:"li"},"read-only"),Object(o.b)("br",{parentName:"li"}),"Returns the manifest URL of the application that made the change to the data store."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/06.api/web-apis/dataStore/datastorechangeevent/revisionid"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"DataStoreChangeEvent.revisionId")))," ",Object(o.b)("inlineCode",{parentName:"li"},"read-only"),Object(o.b)("br",{parentName:"li"}),"Returns the id of the current revision of the data store, i.e. the current change that has been made to a data record.")),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,'In the following snippet we retrieve all the data stores on the device with the name "contacts", then we use DataStore.sync to create a cursor to use for syncing the app with the current "content" data store (displaying new items, etc.) This cursor is passed to the runNextTask() function that will deal with running through the updates in some way. Next, we include some code inside an onchange function so that when a change is made we return the DataStoreChangeEvent (e in this case), find out what type of operation the change is, and then take action based on this type (either adding or deleting a contact\'s information.)'),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"navigator.getDataStores('contacts').then(function(stores) {\n  var cursor = stores[0].sync();\n  runNextTask(cursor);\n\n  stores[0].onchange = function(e) {\n    if (e.operation == 'removed') {\n      // Delete the contact\n      deleteContact(e.id);\n    }\n\n    if (e.operation == 'added') {\n      stores[0].get(e.id).then(function(obj) {\n        // Add the new contact\n        loadData(obj,e.id);\n      });\n    }\n  }\n});\n")),Object(o.b)("h2",{id:"operation-types"},"Operation types"),Object(o.b)("p",null,"The different operation types used in DataStoreChangeEvent are (see also the spec definitions):"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Enumaration"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"added"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The record is added into the data store.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"updated"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The record is updated in the data store.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"removed"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The record is deleted from the data store.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cleared"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All records are deleted from the data store.")))))}s.isMDXComponent=!0},396:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,b=d(e,["components","mdxType","originalType","parentName"]),p=s(a),h=n,u=p["".concat(i,".").concat(h)]||p[h]||l[h]||o;return a?r.a.createElement(u,c(c({ref:t},b),{},{components:a})):r.a.createElement(u,c({ref:t},b))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=h;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var b=2;b<o;b++)i[b]=a[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);