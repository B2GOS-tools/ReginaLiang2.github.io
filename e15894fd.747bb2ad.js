(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{351:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return u}));var n=a(3),r=a(8),o=(a(0),a(398)),s={id:"data",title:"DataStoreTask.data"},i={unversionedId:"06.api/web-apis/dataStore/datastoretask/data",id:"06.api/web-apis/dataStore/datastoretask/data",isDocsHomePage:!1,title:"DataStoreTask.data",description:"The data read-only property of the DataStoreChangeEvent interface returns the data stored in the changed record in the data store. Must return null if the operation is clear or done.",source:"@site/docs/06.api/web-apis/dataStore/datastoretask/data.md",slug:"/06.api/web-apis/dataStore/datastoretask/data",permalink:"/docs/06.api/web-apis/dataStore/datastoretask/data",version:"current"},c=[{value:"Syntax",id:"syntax",children:[{value:"Value",id:"value",children:[]}]},{value:"Example",id:"example",children:[]}],d={rightToc:c};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The data read-only property of the DataStoreChangeEvent interface returns the data stored in the changed record in the data store. Must return null if the operation is clear or done."),Object(o.b)("h2",{id:"syntax"},"Syntax"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"myId = task.data;\n")),Object(o.b)("h3",{id:"value"},"Value"),Object(o.b)("p",null,"Any (whatever data type the object contained in the data record has.)"),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"In the following example, we use navigator.getDataStores to return a list of DataStore objects representing data stores on the device called contacts. Since there is only one such data store, we can access it inside the outer promise using stores","[0]",". The next promise uses DataStore.getLength to return the number of records in the store. If the value is 0, we populate the data store with records contained in the contactsInit object; if there is already data in the store, we run DataStore.sync to create a DataStoreCursor object allowing us to loop through any additions since the code last accessed the data store and update the data display as necessary."),Object(o.b)("p",null,"The cursor is passed to the runNextTask() function, which calls DataStoreCursor.next to start the process of managing the next task \u2014 the resulting DataStoreTask object is passed to the manageTask() function to work out what to do with it. runNextTask() is then called repeatedly by manageTask() until the cursor has finished working through all the records."),Object(o.b)("p",null,"When an add operation is found, the displayExisting() function is passed the task.id and task.data to be used in displaying the record in the app UI."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"navigator.getDataStores('contacts').then(function(stores) {\n  stores[0].getLength().then(function(storeLength) {\n    if(storeLength == 0) {\n        for(i = 0; i < contactsInit.length; i++) {\n        addContact(stores[0],contactsInit[i]);  \n      };\n    } else {\n      var cursor = stores[0].sync();\n      runNextTask(cursor);\n    }\n  });\n});\n\nfunction runNextTask(cursor) {\n  cursor.next().then(function(task) {\n    manageTask(cursor, task);\n  });\n}\n\nfunction manageTask(cursor, task) {\n  if (task.operation == 'done') {\n    // Finished adding contacts!\n    return;\n  }\n\n  if (task.operation == 'add') {\n    // Add the contacts that are different to how it was before\n    displayExisting(task.id, task.data);\n  }\n\n  runNextTask(cursor);\n}\n")))}u.isMDXComponent=!0},398:function(e,t,a){"use strict";a.d(t,"a",(function(){return l})),a.d(t,"b",(function(){return f}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),u=function(e){var t=r.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=u(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=u(a),h=n,f=l["".concat(s,".").concat(h)]||l[h]||p[h]||o;return a?r.a.createElement(f,i(i({ref:t},d),{},{components:a})):r.a.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);