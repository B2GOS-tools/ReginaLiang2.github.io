(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{217:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),o=(n(0),n(396)),s={id:"network-stats",title:"Network Stats"},i={unversionedId:"06.api/web-apis/networkStats/network-stats",id:"06.api/web-apis/networkStats/network-stats",isDocsHomePage:!1,title:"Network Stats",description:"Description",source:"@site/docs/06.api/web-apis/networkStats/network-stats.md",slug:"/06.api/web-apis/networkStats/network-stats",permalink:"/docs/06.api/web-apis/networkStats/network-stats",version:"current"},c=[{value:"Description",id:"description",children:[]},{value:"Interface",id:"interface",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Accessing data",id:"accessing-data",children:[]},{value:"Sampling over time",id:"sampling-over-time",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Network Stats API")," allows you to monitor data usage and expose this information to certified applications."),Object(o.b)("p",null,"Data can be accessed through ",Object(o.b)("inlineCode",{parentName:"p"},"navigator.mozNetworkStats")," which returns an instance of the ",Object(o.b)("inlineCode",{parentName:"p"},"MozNetworkStatsManager")," interface."),Object(o.b)("h2",{id:"interface"},"Interface"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/06.api/web-apis/networkStats/moznetworkstats"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"MozNetworkStats"))),"\nGives access to statistics about the data usage for a given network."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/06.api/web-apis/networkStats/moznetworkstatsdata"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"MozNetworkStatsData"))),"\nRepresent a chunk of data usage statistics."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/06.api/web-apis/networkStats/moznetworkstatsmanager"}),Object(o.b)("strong",{parentName:"a"},Object(o.b)("inlineCode",{parentName:"strong"},"MozNetworkStatsManager"))),"\nProvides methods and properties to monitor data usage.")),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"Navigator.mozNetworkStats")),"\nProvides methods and properties to monitor data usage.")),Object(o.b)("h2",{id:"accessing-data"},"Accessing data"),Object(o.b)("p",null,"Information about the volume of data received and sent is automatically stored by the system. Accessing this information is possible by using the MozNetworkStatsManager.getSamples() method. This method expects three parameters, and a fourth parameter is optional:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"network")," - The origin of the data, which can represent wifi or mobile. If null, data measurement from both origins are merged. To know in advance which kind of origin is available, the MozNetworkStatsManager.getAvailableNetworks() method returns an Array of MozNetworkStats objects representing each supported interface.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"start"))," - A Date object representing the beginning of data measurement.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"end"))," - A Date object representing the end of data measurement.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"options (Optional)"))," - A NetworkStatsGetOptions dictionary. It consists of three keys, two of which are DOMString objects \u2014 appManifestURL and serviceType \u2014 and the one which is a boolean \u2014 browsingTrafficOnly."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"appManifestURL")),"  - is used to filter network stats by app."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"serviceType"))," - is used to filter stats by system service. Note that serviceType and appManifestURL cannot currently be specified at the same time for now. This results in an NS_ERROR_NOT_IMPLMENTED exception being thrown.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"browsingTrafficOnly"))," - controls what kind of traffic is returned in the network stats. If it is set to true, only the browsing traffic generated from the mozbrowser ",Object(o.b)("inlineCode",{parentName:"p"},"<iframe>")," element within an app is returned in result. If it is set as false (the default), the total traffic \u2014 which is generated from both the mozapp and mozbrowser ",Object(o.b)("inlineCode",{parentName:"p"},"<iframe>")," elements \u2014 is returned."))))))),Object(o.b)("p",null,"When called, getSamples() returns a DOMRequest to handle the success or failure of the information request. In case of success the request's result is a MozNetworkStats object."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var networks = navigator.mozNetworkStats.getAvailableNetworks();\n\nnetworks.onsuccess = function() {\n  var network = this.result[0]; // 0 for Wifi; returns a mozNetworkInterface object\n\n  var end = new Date();\n  var start = new Date();\n\n  var samples = navigator.mozNetworkStats.getSamples(network, start, end); // returns a mozNetworkStats object\n\n  samples.onsuccess = function () {\n    console.log("Data received: " + samples.result.data[0].rxBytes + " Bytes");\n    console.log("Data sent: " + samples.result.data[0].txBytes + " Bytes");\n  };\n\n  samples.onerror = function () {\n    console.log("Something went wrong: ", samples.error);\n  };\n};\n\nnetworks.onerror = function () {\n  console.log("Something went wrong: ", networks.error);\n};\n')),Object(o.b)("h2",{id:"sampling-over-time"},"Sampling over time"),Object(o.b)("p",null,"To visualise data usage over time, the information about the amount of data is stored in chunks. Each chunk is a value representing the amount of data exchanged since the last chunk was stored."),Object(o.b)("p",null,"When requesting the stats, the resulting MozNetworkStats object contains as many data chunks as possible for the interval defined between the start and end date. The total number of chunks depends on two parameters (note that those parameters are read-only):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"MozNetworkStatsManager.sampleRate"))," -  which represents the minimum time in milliseconds between samples stored in the database."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"MozNetworkStatsManager.maxStorageAge"))," -  which represents the time in milliseconds recorded by the API until present time. All samples older than maxStorageAge from now are deleted.")),Object(o.b)("p",null,"Each data chunk is a MozNetworkStatsData object, and all the data chunks for a given time frame are available through the MozNetworkStats.data property, which is an Array of MozNetworkStatsData objects."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var networks = navigator.mozNetworkStats.getAvailableNetworks();\n\nnetworks.onsuccess = function() {\n  var network = this.result[0]; // 0 for Wifi; returns a mozNetworkInterface object\n\n  var end = new Date();\n  var oneHour = 3600000; //in milliseconds\n  var start = new Date(end.getTime() - oneHour);\n\n  var samples = navigator.mozNetworkStats.getSamples(network, start, end); // returns a mozNetworkStats object\n\n  samples.onsuccess = function () {\n    var total = {\n      receive: 0,\n      send   : 0\n    };\n\n    samples.result.data.forEach(function (chunk) { // array of MozNetworkStatsData objects\n      total.receive += chunk.rxBytes;\n      total.send    += chunk.txBytes;\n    });\n\n    console.log("Since: " + start.toString());\n    console.log("Data received: " + total.receive + " Bytes");\n    console.log("Data sent: " + total.send + " Bytes")\n  };\n\n  samples.onerror = function () {\n    console.log("Something went wrong: ", samples.error);\n  };\n};\n\nnetworks.onerror = function () {\n  console.log("Something went wrong: ", networks.error);\n')))}p.isMDXComponent=!0},396:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(s,".").concat(u)]||b[u]||m[u]||o;return n?r.a.createElement(d,i(i({ref:t},l),{},{components:n})):r.a.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);