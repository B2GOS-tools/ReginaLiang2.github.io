(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{214:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return d})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return c}));var o=t(3),a=t(8),r=(t(0),t(396)),i={id:"navigator-b2g-downloadManager",title:"navigator.b2g.downloadManager"},d={unversionedId:"09.migration-from-2.5/next-new-apis/b2g/downloadManager/navigator-b2g-downloadManager",id:"version-sfp-3.0/09.migration-from-2.5/next-new-apis/b2g/downloadManager/navigator-b2g-downloadManager",isDocsHomePage:!1,title:"navigator.b2g.downloadManager",description:"Description",source:"@site/versioned_docs/version-sfp-3.0/09.migration-from-2.5/next-new-apis/b2g/downloadManager/readme.md",slug:"/09.migration-from-2.5/next-new-apis/b2g/downloadManager/navigator-b2g-downloadManager",permalink:"/docs/sfp-3.0/09.migration-from-2.5/next-new-apis/b2g/downloadManager/navigator-b2g-downloadManager",version:"sfp-3.0"},l=[{value:"Description",id:"description",children:[]},{value:"Interfaces",id:"interfaces",children:[{value:"DownloadManager",id:"downloadmanager",children:[]},{value:"DownloadObject",id:"downloadobject",children:[]},{value:"AdoptDownloadDict",id:"adoptdownloaddict",children:[]}]},{value:"Examples",id:"examples",children:[]}],s={rightToc:l};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"description"},"Description"),Object(r.b)("p",null,"This class simplifies the access of the Download Manager window."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"interfaces"},"Interfaces"),Object(r.b)("h3",{id:"downloadmanager"},"DownloadManager"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-cpp"}),'enum DownloadState {\n  "downloading",\n  "stopped",\n  "succeeded",\n  "finalized"\n};\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-cpp"}),'interface DownloadManager : EventTarget {\n  // This promise returns an array of downloads with all the current\n  // download objects.\n  Promise<sequence<DownloadObject>> getDownloads();\n\n  // Removes one download from the downloads set. Returns a promise resolved\n  // with the finalized download.\n  Promise<DownloadObject> remove(DownloadObject download);\n\n  // Removes all completed downloads.  This kicks off an asynchronous process\n  // that will eventually complete, but will not have completed by the time this\n  // method returns.  If you care about the side-effects of this method, know\n  // that each existing download will have its onstatechange method invoked and\n  // will have a new state of "finalized".  (After the download is finalized, no\n  // further events will be generated on it.)\n  void clearAllDone();\n\n  // Add completed downloads from applications that must perform the download\n  // process themselves. For example, email.  The method is resolved with a\n  // fully populated DownloadObject instance on success, or rejected in the\n  // event all required options were not provided.\n  //\n  // The adopted download will also be reported via the ondownloadstart event\n  // handler.\n  //\n  // Applications must currently be certified to use this, but it could be\n  // widened at a later time.\n  //\n  // Note that "download" is not actually optional, but WebIDL requires that it\n  // be marked as such because it is not followed by a required argument.  The\n  // promise will be rejected if the dictionary is omitted or the specified\n  // file does not exist on disk.\n  Promise<DownloadObject> adoptDownload(optional AdoptDownloadDict download = {});\n\n  // Fires when a new download starts.\n  attribute EventHandler ondownloadstart;\n};\n')),Object(r.b)("h3",{id:"downloadobject"},"DownloadObject"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-cpp"}),"interface DownloadObject : EventTarget {\n  // The full size of the resource.\n  readonly attribute long long totalBytes;\n\n  // The number of bytes that we have currently downloaded.\n  readonly attribute long long currentBytes;\n\n  // The url of the resource.\n  readonly attribute DOMString url;\n\n  // The full path in local storage where the file will end up once the download\n  // is complete. This is equivalent to the concatenation of the 'storagePath'\n  // to the 'mountPoint' of the nsIVolume associated with the 'storageName'\n  // (with delimiter).\n  readonly attribute DOMString path;\n\n  // The DeviceStorage volume name on which the file is being downloaded.\n  readonly attribute DOMString storageName;\n\n  // The DeviceStorage path on the volume with 'storageName' of the file being\n  // downloaded.\n  readonly attribute DOMString storagePath;\n\n  // The state of the download.  One of: downloading, stopped, succeeded, or\n  // finalized.  A finalized download is a download that has been removed /\n  // cleared and is no longer tracked by the download manager and will not\n  // receive any further onstatechange updates.\n  readonly attribute DownloadState state;\n\n  // The mime type for this resource.\n  readonly attribute DOMString contentType;\n\n  // The timestamp this download started.\n  readonly attribute object startTime;\n\n  // An opaque identifier for this download. All instances of the same\n  // download (eg. in different windows) will have the same id.\n  readonly attribute DOMString id;\n\n  // The manifestURL of the application that added this download. Only used for\n  // downloads added via the adoptDownload API call.\n  readonly attribute DOMString? sourceAppManifestURL;\n\n  // A DOM error object, that will be not null when a download is stopped\n  // because something failed.\n  readonly attribute DOMException? error;\n\n  // Pauses the download.\n  Promise<DownloadObject> pause();\n\n  // Resumes the download. This resolves only once the download has\n  // succeeded.\n  Promise<DownloadObject> resume();\n\n  // This event is triggered anytime a property of the object changes:\n  // - when the transfer progresses, updating currentBytes.\n  // - when the state and/or error attributes change.\n  attribute EventHandler onstatechange;\n};\n")),Object(r.b)("h3",{id:"adoptdownloaddict"},"AdoptDownloadDict"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-cpp"}),"// Used to initialize the DownloadObject object for adopted downloads.\n// fields directly maps to the DownloadObject fields.\ndictionary AdoptDownloadDict {\n  // The URL of this resource if there is one available. An empty string if\n  // the download is not accessible via URL. An empty string is chosen over\n  // null so that existinc code does not need to null-check but the value is\n  // still falsey.  (Note: If you do have a usable URL, you should probably not\n  // be using the adoptDownload API and instead be initiating downloads the\n  // normal way.)\n  DOMString url;\n\n  // The storageName of the DeviceStorage instance the file was saved to.\n  // Required but marked as optional so the bindings don't auto-coerce the value\n  // null to \"null\".\n  DOMString? storageName;\n  // The path of the file within the DeviceStorage instance named by\n  // 'storageName'.  This is used to automatically compute the 'path' of the\n  // download.  Note that when DeviceStorage gives you a path to a file, the\n  // first path segment is the name of the specific device storage and you do\n  // *not* want to include this.  For example, if DeviceStorage tells you the\n  // file has a path of '/sdcard1/actual/path/file.ext', then the storageName\n  // should be 'sdcard1' and the storagePath should be 'actual/path/file.ext'.\n  //\n  // The existence of the file will be validated will be validated with stat()\n  // and the size the file-system tells us will be what we use.\n  //\n  // Required but marked as optional so the bindings don't auto-coerce the value\n  // null to \"null\".\n  DOMString? storagePath;\n\n  // The mime type for this resource.  Required, but marked as optional because\n  // WebIDL otherwise auto-coerces the value null to \"null\".\n  DOMString? contentType;\n\n  // The time the download was started. If omitted, the current time is used.\n  object? startTime;\n};\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const downloadManager = navigator.b2g.downloadManager;\nif (!downloadManager) {\nconsole.error('navigator.b2g.downloadManager not supported!');\nreturn;\n}\ndownloadManager.clearAllDone();\nfunction onDownloadStart(ev) {\n    // start download process\n}\ndownloadManager.addEventListener('downloadstart', onDownloadStart);\n")))}c.isMDXComponent=!0},396:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),c=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},u=function(e){var n=c(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=o,b=u["".concat(i,".").concat(p)]||u[p]||h[p]||r;return t?a.a.createElement(b,d(d({ref:n},s),{},{components:t})):a.a.createElement(b,d({ref:n},s))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=p;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var s=2;s<r;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);