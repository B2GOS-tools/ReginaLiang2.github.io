(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{259:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(8),i=(a(0),a(398)),o={id:"device-storage",title:"Device Storage"},s={unversionedId:"06.api/web-apis/deviceStorage/device-storage",id:"06.api/web-apis/deviceStorage/device-storage",isDocsHomePage:!1,title:"Device Storage",description:"Description",source:"@site/docs/06.api/web-apis/deviceStorage/device-storage.md",slug:"/06.api/web-apis/deviceStorage/device-storage",permalink:"/docs/06.api/web-apis/deviceStorage/device-storage",version:"current"},c=[{value:"Description",id:"description",children:[]},{value:"Accessing device storage",id:"accessing-device-storage",children:[{value:"Entry point",id:"entry-point",children:[]},{value:"Accessing different storage areas with navigator.getDeviceStorages()",id:"accessing-different-storage-areas-with-navigatorgetdevicestorages",children:[]},{value:"Device storage permissions",id:"device-storage-permissions",children:[]}]},{value:"Using a storage",id:"using-a-storage",children:[{value:"Add a file",id:"add-a-file",children:[]},{value:"Get a file",id:"get-a-file",children:[]},{value:"Delete a file",id:"delete-a-file",children:[]}]},{value:"Storage information",id:"storage-information",children:[{value:"Available space",id:"available-space",children:[]},{value:"Listening for change",id:"listening-for-change",children:[]}]}],l={rightToc:c};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"The Device Storage API is used to access the file system within a Web app. Accessing the file system can be highly sensitive, and for that reason this API is available for privileged apps only."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Note:")," Accessing device storage is slow due to a limitation at the physical level. In many cases it can be faster to use an IndexedDB database to store files instead of physical device storage.")),Object(i.b)("h2",{id:"accessing-device-storage"},"Accessing device storage"),Object(i.b)("p",null,"This section explains what is needed to access device storage."),Object(i.b)("h3",{id:"entry-point"},"Entry point"),Object(i.b)("p",null,"It's possible to access storage areas by using the ",Object(i.b)("inlineCode",{parentName:"p"},"navigator.getDeviceStorage()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"navigator.getDeviceStorages()")," methods:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"navigator.getDeviceStorage()"))," accepts a string parameter representing the name of the default storage area to be accessed. The method returns a DeviceStorage object, which is used to access the related storage area. It returns the storage area whose .default attribute is true. This is controlled by the user via Settings App > Media Storage > Default media location.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"navigator.getDeviceStorages()"))," on the other hand accepts a string representing the name of the storage area to be accessed, and returns an Array of DeviceStorage objects, one per physical storage area."))),Object(i.b)("p",null,"KaiOS provides the following storage names:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"apps"),Object(i.b)("br",{parentName:"p"}),"\n","This storage area is used to store the user data needed by apps. As it is critical data, accessing this storage area requires some extra privileges (see below) and is available to certified applications only.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"music"),Object(i.b)("br",{parentName:"p"}),"\n","This is the storage area where music and sounds are stored.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"pictures"),Object(i.b)("br",{parentName:"p"}),"\n","This is the storage area where pictures are stored.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"sdcard"),Object(i.b)("br",{parentName:"p"}),"\n","This is the storage area that grants access to the device's SDCard. sdcard is also used as the name of the device's default internal storage, which is a bit unfortunate and potentially confusing; be aware.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"videos"),Object(i.b)("br",{parentName:"p"}),"\n","This is the storage area where videos are stored."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var pics = navigator.getDeviceStorage('pictures');\n")),Object(i.b)("h3",{id:"accessing-different-storage-areas-with-navigatorgetdevicestorages"},"Accessing different storage areas with navigator.getDeviceStorages()"),Object(i.b)("p",null,"When using ",Object(i.b)("inlineCode",{parentName:"p"},"navigator.getDeviceStorages()"),", if there is more than one storage area then the internal one will be named for example ",Object(i.b)("inlineCode",{parentName:"p"},"sdcard")," and the physical storage area will be called something else (sometimes it's ",Object(i.b)("inlineCode",{parentName:"p"},"extsdcard"),", sometimes it's ",Object(i.b)("inlineCode",{parentName:"p"},"sdcard1"),"). This varies by device manufacturer. The names of files on the sdcard storage area will be ",Object(i.b)("inlineCode",{parentName:"p"},"/sdcard/path/filename"),", and the names of files on the ",Object(i.b)("inlineCode",{parentName:"p"},"sdcard1")," storage area will be ",Object(i.b)("inlineCode",{parentName:"p"},"/sdcard1/path/filename"),", or whatever."),Object(i.b)("p",null,"Note that the ",Object(i.b)("inlineCode",{parentName:"p"},"/sdcard")," and ",Object(i.b)("inlineCode",{parentName:"p"},"/sdcard1")," are storage names. Their actual mount points on the system are determined via vold and/or ",Object(i.b)("inlineCode",{parentName:"p"},"/system/etc/volume.cfg")," file.) ",Object(i.b)("inlineCode",{parentName:"p"},"DeviceStorage")," transparently maps the ",Object(i.b)("inlineCode",{parentName:"p"},"storageName")," into the actual ",Object(i.b)("inlineCode",{parentName:"p"},"mountPoint")," (so you don't need the mount point if you're just accessing the files through device storage)."),Object(i.b)("p",null,"If you want to determine the mount point to examine the filesystem from an adb shell, then you can determine the vold mount points by using the command adb shell vdc volume list  (this requires a root shell)."),Object(i.b)("p",null,"On the Flame, you'll see something like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"110 0 sdcard /storage/sdcard 4\n110 0 sdcard1 /storage/sdcard1 4\n200 0 Volumes listed.\n")),Object(i.b)("p",null,"For volumes that aren't managed by vold the mount point is found in ",Object(i.b)("inlineCode",{parentName:"p"},"/system/etc/volume.cfg"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Note:")," In Gaia engineering builds there is a ds-test app, which is useful for device storage testing.")),Object(i.b)("h3",{id:"device-storage-permissions"},"Device storage permissions"),Object(i.b)("p",null,"To be able to use these storage areas, the application must declare them in its application manifest. For example, if the application wants to access the sdcard storage area, it must have the ",Object(i.b)("inlineCode",{parentName:"p"},'"device-storage:sdcard"')," permission in its manifest."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"permissions": {\n  "device-storage:videos":{ "access": "readonly" },\n  "device-storage:pictures":{ "access": "readwrite" }\n}\n')),Object(i.b)("p",null,"As mentioned above, using ",Object(i.b)("inlineCode",{parentName:"p"},"device-storage:apps")," also needs some extra permissions, in the form of the webapps-manage permission, which allows access to the ",Object(i.b)("inlineCode",{parentName:"p"},"navigator.mozApps.mgmt")," API for managing installed open web apps."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"permissions": {\n  "device-storage:apps":{ "access": "readwrite" },\n  "webapps-manage":{ }\n}\n')),Object(i.b)("p",null,"All of the device-storage name permissions are privileged level, except for apps, which is certified. webapps-manage is certified level."),Object(i.b)("h2",{id:"using-a-storage"},"Using a storage"),Object(i.b)("p",null,"Once an application gets access to a storage area, it's possible to add, get and remove files inside the area."),Object(i.b)("h3",{id:"add-a-file"},"Add a file"),Object(i.b)("p",null,"Adding a file is done using the addNamed or add methods. The former allows to set an explicit name when storing a file while the latter creates a name automatically when the file is stored. Both methods are asynchronous and return a ",Object(i.b)("inlineCode",{parentName:"p"},"DOMRequest")," object to handle the success or error of the operation. This is very important as writing and reading files on a physical support is a slow process."),Object(i.b)("p",null,"Those two methods expect a Blob as their first parameter. This object will be turned into a file under the hood and stored. When creating a Blob object, it's mandatory to give it a type. This type, which is a MIME type, is important because some storage areas have restrictions based on the type:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"music only accepts Blob with a valid audio MIME type"),Object(i.b)("li",{parentName:"ul"},"pictures only accepts Blob with a valid image MIME type"),Object(i.b)("li",{parentName:"ul"},"videos only accepts Blob with a valid video MIME type")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var sdcard = navigator.getDeviceStorage("sdcard");\nvar file   = new Blob(["This is a text file."], {type: "text/plain"});\n\nvar request = sdcard.addNamed(file, "my-file.txt");\n\nrequest.onsuccess = function () {\n  var name = this.result;\n  console.log(\'File "\' + name + \'" successfully wrote on the sdcard storage area\');\n}\n\n// An error typically occur if a file with the same name already exist\nrequest.onerror = function () {\n  console.warn(\'Unable to write the file: \' + this.error);\n}\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Note:"),' Repositories in a storage area are implicit. It\'s not possible to create explicitly an empty repository. If you want to use a repository structure you have to make it part of the name of the file to store. So if you want to store the file bar inside the foo repository, you have to use the addNamed method with the complete path name of the file addNamed(blob, "foo/bar"). This is also true when you want to retrieve a file using its name (see below).',Object(i.b)("br",{parentName:"p"}),"\n",'As files are added in a given restricted storage area for security reasons, a file path name cannot start with "/" nor "../" (and "./" is pointless).')),Object(i.b)("h3",{id:"get-a-file"},"Get a file"),Object(i.b)("p",null,"Retrieving a file can be done in two ways: by using its name or by iterating the whole list of files."),Object(i.b)("p",null,"The easiest way is to retrieve a file by its name using the ",Object(i.b)("inlineCode",{parentName:"p"},"get")," and ",Object(i.b)("inlineCode",{parentName:"p"},"getEditable")," methods. The former provides a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/File"}),Object(i.b)("inlineCode",{parentName:"a"},"File"))," object (which act like a read only file) when the latter provides a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/FileHandle"}),Object(i.b)("inlineCode",{parentName:"a"},"FileHandle"))," object (which allows updating the underlaying file). Both methods are asynchronous and return a ",Object(i.b)("inlineCode",{parentName:"p"},"DOMRequest")," object to handle the success or error of the operation."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var sdcard = navigator.getDeviceStorage(\'sdcard\');\n\nvar request = sdcard.get("my-file.txt");\n\nrequest.onsuccess = function () {\n  var file = this.result;\n  console.log("Get the file: " + file.name);\n}\n\nrequest.onerror = function () {\n  console.warn("Unable to get the file: " + this.error);\n}\n')),Object(i.b)("p",null,"The other way to retrieve files is by browsing the content of the storage area. This is possible using the enumerate and enumerateEditable methods. The former provides ",Object(i.b)("inlineCode",{parentName:"p"},"File")," objects when the latter provides ",Object(i.b)("inlineCode",{parentName:"p"},"FileHandle")," objects. Both methods are asynchronous and return a ",Object(i.b)("inlineCode",{parentName:"p"},"DOMCursor")," object to iterate along the list of files. A ",Object(i.b)("inlineCode",{parentName:"p"},"DOMCursor")," is nothing less than a ",Object(i.b)("inlineCode",{parentName:"p"},"DOMRequest")," with extra power to iterate asynchronously along a list of things (files in that case)."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var pics = navigator.getDeviceStorage(\'pictures\');\n\n// Let\'s browse all the images available\nvar cursor = pics.enumerate();\n\ncursor.onsuccess = function () {\n  if(cursor.result.name !== null) {\n    var file = cursor.result;\n    console.log("File found: " + file.name);\n \n    // Once we found a file we check if there is other results\n    // Then we move to the next result, which call the cursor\n    // success with the next file as result.\n      this.continue();\n    }\n}\n\ncursor.onerror = function () { \n    console.warn("No file found: " + this.error); \n}\n')),Object(i.b)("p",null,"It's possible to limit the number of results by passing two optional parameters to the ",Object(i.b)("inlineCode",{parentName:"p"},"enumerate")," and ",Object(i.b)("inlineCode",{parentName:"p"},"enumerateEditable")," methods."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The first parameter can be a string representing a sub folder to search inside."),Object(i.b)("li",{parentName:"ul"},"The second parameter can be an object with a since property, which allows you to limit the search to a given time period.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var pics = navigator.getDeviceStorage('pictures');\n\n// Lets retrieve picture from the last week.\nvar param = {\n  since: new Date((+new Date()) - 7*24*60*60*1000)\n}\n\nvar cursor = pics.enumerate(param);\n\ncursor.onsuccess = function () {\n  var file = this.result;\n  console.log(\"Picture taken on: \" + file.lastModifiedDate);\n\n  if (!this.done) {\n    this.continue();\n  }\n}\n")),Object(i.b)("h3",{id:"delete-a-file"},"Delete a file"),Object(i.b)("p",null,"A file can be removed from the storage area by simply using the ",Object(i.b)("inlineCode",{parentName:"p"},"delete")," method. This method just needs the name of the file to delete. As all the other methods from the ",Object(i.b)("inlineCode",{parentName:"p"},"DeviceStorage")," interface, this one is also asynchronous and returns a ",Object(i.b)("inlineCode",{parentName:"p"},"DOMRequest")," object to handle the ",Object(i.b)("inlineCode",{parentName:"p"},"success")," or ",Object(i.b)("inlineCode",{parentName:"p"},"error")," of the operation."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var sdcard = navigator.getDeviceStorage(\'sdcard\');\n\nvar request = sdcard.delete("my-file.txt");\n\nrequest.onsuccess = function () {\n  console.log("File deleted");\n}\n\nrequest.onerror = function () {\n  console.log("Unable to delete the file: " + this.error);\n}\n')),Object(i.b)("h2",{id:"storage-information"},"Storage information"),Object(i.b)("p",null,"Beyond accessing files, a storage area provides a few methods to easily reach some important information"),Object(i.b)("h3",{id:"available-space"},"Available space"),Object(i.b)("p",null,"One of the most important things to know when storing files on a device is the amount of space available. The DeviceStorage interface provides two useful functions dedicated to space:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"freeSpace() to get the amount of free space available to store new files;"),Object(i.b)("li",{parentName:"ul"},"usedSpace() to get the amount of space used to store the files;")),Object(i.b)("p",null,"As those methods are asynchronous, they return a ",Object(i.b)("inlineCode",{parentName:"p"},"DOMRequest")," object to handle the success or error of the operation."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var videos = navigator.getDeviceStorage(\'videos\');\n\nvar request = videos.usedSpace();\n\nrequest.onsuccess = function () {\n  // The result is express in bytes, lets turn it into megabytes\n  var size = this.result / 1048576;\n  console.log("The videos on your device use a total of " + size.toFixed(2) + "Mo of space.");\n}\n\nrequest.onerror = function () {\n  console.warn("Unable to get the space used by videos: " + this.error);\n}\n')),Object(i.b)("h3",{id:"listening-for-change"},"Listening for change"),Object(i.b)("p",null,"As many applications can use a same storage area at the same time, it's sometimes useful for an application to be aware of a change in that storage area. It's also useful for an application performing an asynchronous action because it doesn't have to relay on all the ",Object(i.b)("inlineCode",{parentName:"p"},"DOMRequest")," objects returned by each method of the ",Object(i.b)("inlineCode",{parentName:"p"},"DeviceStorage")," interface."),Object(i.b)("p",null,"To that end, a change event is triggered each time a file is created, modified or deleted. This event can be captured using the ",Object(i.b)("inlineCode",{parentName:"p"},"onchange")," property or the ",Object(i.b)("inlineCode",{parentName:"p"},"addEventListener()")," method. The event handler gets a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/06.api/web-apis/deviceStorage/02.devicestoragechangeevent"}),"DeviceStorageChangeEvent")," object which is a regular ",Object(i.b)("inlineCode",{parentName:"p"},"Event")," object with two extra properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/06.api/web-apis/deviceStorage/02.devicestoragechangeevent/02.reason"}),Object(i.b)("inlineCode",{parentName:"a"},"DeviceStorageChangeEvent.reason"))," which gives the reason of the change (created, modified or deleted).")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/06.api/web-apis/deviceStorage/02.devicestoragechangeevent/01.path"}),Object(i.b)("inlineCode",{parentName:"a"},"DeviceStorageChangeEvent.path"))," which gives the full path to the file affected by the change."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var sdcard = navigator.getDeviceStorage('sdcard');\n\nsdcard.onchange = function (change) {\n  var reason = change.reason;\n  var path   = change.path;\n\n  console.log('The file \"' + path + '\" has been ' + reason);\n}\n")))}p.isMDXComponent=!0},398:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(a),h=n,u=b["".concat(o,".").concat(h)]||b[h]||d[h]||i;return a?r.a.createElement(u,s(s({ref:t},l),{},{components:a})):r.a.createElement(u,s({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);