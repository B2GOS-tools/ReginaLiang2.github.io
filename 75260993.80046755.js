(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{219:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return c}));var r=t(3),s=t(8),a=(t(0),t(396)),o={id:"navigator-b2g-mobileMessage",title:"navigator.b2g.mobileMessage"},i={unversionedId:"09.migration-from-2.5/next-new-apis/b2g/mobileMessage/navigator-b2g-mobileMessage",id:"version-sfp-3.0/09.migration-from-2.5/next-new-apis/b2g/mobileMessage/navigator-b2g-mobileMessage",isDocsHomePage:!1,title:"navigator.b2g.mobileMessage",description:"Description",source:"@site/versioned_docs/version-sfp-3.0/09.migration-from-2.5/next-new-apis/b2g/mobileMessage/readme.md",slug:"/09.migration-from-2.5/next-new-apis/b2g/mobileMessage/navigator-b2g-mobileMessage",permalink:"/docs/sfp-3.0/09.migration-from-2.5/next-new-apis/b2g/mobileMessage/navigator-b2g-mobileMessage",version:"sfp-3.0"},b=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Sample code",id:"sample-code",children:[]}],l={rightToc:b};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"description"},"Description"),Object(a.b)("p",null,"WebSMS is an API that makes it possible for web content to create, send,\nand receive Short Message Service (SMS) or Multimedia Messaging Service (MMS) messages."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"syntax"},"Syntax"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cpp"}),"interface MobileMessageManager : EventTarget\n{\n  [Throws]\n  DOMRequest getSegmentInfoForText(DOMString text);\n\n  /**\n   * Send SMS.\n   *\n   * @param number\n   *        Either a DOMString (only one number) or an array of numbers.\n   * @param text\n   *        The text message to be sent.\n   * @param sendParameters\n   *        A SmsSendParameters object.\n   *\n   * @return\n   *        A DOMRequest object indicating the sending result if one number\n   *        has been passed; an array of DOMRequest objects otherwise.\n   */\n  [Throws]\n  DOMRequest send(DOMString number,\n                  DOMString text,\n                  optional SmsSendParameters sendParameters={});\n  [Throws]\n  sequence<DOMRequest> send(sequence<DOMString> numbers,\n                            DOMString text,\n                            optional SmsSendParameters sendParameters={});\n\n  /**\n   * Send MMS.\n   *\n   * @param parameters\n   *        A MmsParameters object.\n   * @param sendParameters\n   *        A MmsSendParameters object.\n   *\n   * @return\n   *        A DOMRequest object indicating the sending result.\n   */\n  [Throws]\n  DOMRequest sendMMS(optional MmsParameters parameters={},\n                       optional MmsSendParameters sendParameters={});\n\n  [Throws]\n  DOMRequest getMessage(long id);\n\n  // The parameter can be either a message id, or a {Mms,Sms}Message, or an\n  // array of {Mms,Sms}Message objects.\n  [Throws]\n  DOMRequest delete(long id);\n  [Throws]\n  DOMRequest delete(SmsMessage message);\n  [Throws]\n  DOMRequest delete(MmsMessage message);\n  [Throws]\n  DOMRequest delete(sequence<(long or SmsMessage or MmsMessage)> params);\n\n  // Iterates through {Mms,Sms}Message.\n  [Throws]\n  MobileMessageIterable getMessages(optional MobileMessageFilter filter={},\n                        optional boolean reverse = false);\n\n  [Throws]\n  DOMRequest markMessageRead(long id,\n                             boolean read,\n                             optional boolean sendReadReport = false);\n\n  // Iterates through MobileMessageThread.\n  [Throws]\n  MobileMessageIterable getThreads();\n\n  [Throws]\n  DOMRequest retrieveMMS(long id);\n  [Throws]\n  DOMRequest retrieveMMS(MmsMessage message);\n\n  [Throws]\n  Promise<SmscAddress> getSmscAddress(optional unsigned long serviceId);\n\n  /**\n   * Set the SMSC address.\n   *\n   * @param smscAddress\n   *        SMSC address to use.\n   *        Reject if smscAddress.address does not present.\n   * @param serviceId (optional)\n   *        The ID of the RIL service which needs to be specified under\n   *        the multi-sim scenario.\n   * @return a Promise\n   *         Resolve if success. Otherwise, reject with error cause.\n   */\n  [NewObject]\n  Promise<void> setSmscAddress(optional SmscAddress smscAddress={},\n                               optional unsigned long serviceId);\n\n  attribute EventHandler onreceived;\n  attribute EventHandler onretrieving;\n  attribute EventHandler onsending;\n  attribute EventHandler onsent;\n  attribute EventHandler onfailed;\n  attribute EventHandler ondeliverysuccess;\n  attribute EventHandler ondeliveryerror;\n  attribute EventHandler onreadsuccess;\n  attribute EventHandler onreaderror;\n  attribute EventHandler ondeleted;\n};\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"methods"},"Methods"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.addEventListener"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Add EventListener for mobileMessage."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.getThreads()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Iterates through MobileMessageThread."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.getMessage()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Iterates through {Mms,Sms}Message."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.retrieveMMS()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","retrieveMMS through mobileMessage."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.getMessages()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Iterates through {Mms,Sms}Message."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.send()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Send SMS."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.sendMMS()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Send MMS."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.delete()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Delete {Mms,Sms}Message."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.markMessageRead()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","&Mark Message as read."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"navigator.b2g.mobileMessage.getSegmentInfoForText()"))),Object(a.b)("p",null,"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","Get segment information for text message."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"sample-code"},"Sample code"),Object(a.b)("p",null,"TBD"))}c.isMDXComponent=!0},396:function(e,n,t){"use strict";t.d(n,"a",(function(){return g})),t.d(n,"b",(function(){return p}));var r=t(0),s=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=s.a.createContext({}),c=function(e){var n=s.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=c(e.components);return s.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},d=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=b(e,["components","mdxType","originalType","parentName"]),g=c(t),d=r,p=g["".concat(o,".").concat(d)]||g[d]||m[d]||a;return t?s.a.createElement(p,i(i({ref:n},l),{},{components:t})):s.a.createElement(p,i({ref:n},l))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var b in n)hasOwnProperty.call(n,b)&&(i[b]=n[b]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);