(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{177:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),o=(n(0),n(398)),c={id:"05.onchange",title:"DataStore.onchange"},i={unversionedId:"06.api/web-apis/dataStore/datastore/05.onchange",id:"06.api/web-apis/dataStore/datastore/05.onchange",isDocsHomePage:!1,title:"DataStore.onchange",description:"The onchange event handler of the DataStore interface fires when a change is made to the data store. Its main use is to synchronize different apps that are using the data store when a change is made. When fired, this event returns a DataStoreChangeEvent, which can be used to handle the change that was just made. Alternatively, when the event fires you could create a DataStoreCursor and iterate through all the records, if needed.",source:"@site/docs/06.api/web-apis/dataStore/datastore/05.onchange.md",slug:"/06.api/web-apis/dataStore/datastore/05.onchange",permalink:"/docs/06.api/web-apis/dataStore/datastore/05.onchange",version:"current"},s=[{value:"Syntax",id:"syntax",children:[]},{value:"Example",id:"example",children:[]}],d={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"onchange")," event handler of the ",Object(o.b)("inlineCode",{parentName:"p"},"DataStore")," interface fires when a change is made to the data store. Its main use is to synchronize different apps that are using the data store when a change is made. When fired, this event returns a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/06.api/web-apis/dataStore/datastorechangeevent"}),Object(o.b)("inlineCode",{parentName:"a"},"DataStoreChangeEvent")),", which can be used to handle the change that was just made. Alternatively, when the event fires you could create a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/06.api/web-apis/dataStore/datastorecursor"}),Object(o.b)("inlineCode",{parentName:"a"},"DataStoreCursor"))," and iterate through all the records, if needed."),Object(o.b)("h2",{id:"syntax"},"Syntax"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.onchange = function() {\n  // run some code to sync apps that use the data store\n}\n")),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"This section shows two approaches to handling the same problem \u2014 syncing data when another application makes a change to the data store."),Object(o.b)("p",null,'In our first snippet, we retrieve all the data stores on the device with the name "contacts", then we use ',Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/06.api/web-apis/dataStore/datastore/12.sync"}),Object(o.b)("inlineCode",{parentName:"a"},"DataStore.sync")),' to create a cursor to use for syncing the app with the current "content" data store (displaying new items, etc.) This cursor is passed to the ',Object(o.b)("inlineCode",{parentName:"p"},"runNextTask()")," function that will deal with running through the updates in some way. Next, we include some code inside an onchange function so that when a change is made we return the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/06.api/web-apis/dataStore/datastorechangeevent"}),Object(o.b)("inlineCode",{parentName:"a"},"DataStoreChangeEvent")),", find out what type of task the change was, and then take action based on this type (either adding or deleting a contact's information.)"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"navigator.getDataStores('contacts').then(function(stores) {\n  var cursor = stores[0].sync();\n  runNextTask(cursor);\n\n  stores[0].onchange = function(e) {\n    if (e.operation == 'removed') {\n      // Delete the contact\n      deleteContact(e.id);\n    }\n\n    if (e.operation == 'added') {\n      stores[0].get(e.id).then(function(obj) {\n        // Add the new contact\n        loadData(obj,e.id);\n      });\n    }\n  }\n});\n")),Object(o.b)("p",null,'In the second snippet, we retrieve all the data stores on the device with the name "contacts", then we use ',Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/06.api/web-apis/dataStore/datastore/12.sync"}),Object(o.b)("inlineCode",{parentName:"a"},"DataStore.sync")),' to create a cursor to use for syncing the app with the current "content" data store (displaying new items, etc.) This cursor is passed to the ',Object(o.b)("inlineCode",{parentName:"p"},"runNextTask()")," function that will deal with running through the updates in some way. Next, we include the same code inside an ",Object(o.b)("inlineCode",{parentName:"p"},"onchange")," function , so that if a change is made to the data store by any app that uses it, the syncing process will be run again."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"navigator.getDataStores('contacts').then(function(stores) {\n  var cursor = stores[0].sync();\n  runNextTask(cursor);\n\n  stores[0].onchange = function() {\n    contactList.innerHTML = '';\n    var cursor = stores[0].sync();\n    runNextTask(cursor);\n  }\n});\n")))}p.isMDXComponent=!0},398:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},l=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(n),l=a,b=h["".concat(c,".").concat(l)]||h[l]||u[l]||o;return n?r.a.createElement(b,i(i({ref:t},d),{},{components:n})):r.a.createElement(b,i({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=l;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var d=2;d<o;d++)c[d]=n[d];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"}}]);