(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{276:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var o=t(3),a=t(8),i=(t(0),t(396)),r={id:"network-state-changes",title:"Network State Changes"},c={unversionedId:"03.core-developer-topics/network-state-changes",id:"03.core-developer-topics/network-state-changes",isDocsHomePage:!1,title:"Network State Changes",description:"In order to build a good offline-capable web application, you need to know when your application is actually offline. You also need to know when your application has returned to an 'online' status again. Effectively, the requirements break down as follows:",source:"@site/docs/03.core-developer-topics/network-state-changes.md",slug:"/03.core-developer-topics/network-state-changes",permalink:"/docs/03.core-developer-topics/network-state-changes",version:"current",sidebar:"docs",previous:{title:"Caching",permalink:"/docs/03.core-developer-topics/caching"},next:{title:"Storage",permalink:"/docs/03.core-developer-topics/storage"}},l=[{value:"NavigatorOnLine",id:"navigatoronline",children:[{value:"<code>navigator.onLine</code>",id:"navigatoronline-1",children:[]},{value:"<code>online</code> and <code>offline</code> events",id:"online-and-offline-events",children:[]},{value:"Example",id:"example",children:[]}]},{value:"Network Information",id:"network-information",children:[{value:"Examples",id:"examples",children:[]},{value:"Interfaces",id:"interfaces",children:[]}]}],s={rightToc:l};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In order to build a good offline-capable web application, you need to know when your application is actually offline. You also need to know when your application has returned to an 'online' status again. Effectively, the requirements break down as follows:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"You need to know when the user comes back online so that you can re-synchronize with the server."),Object(i.b)("li",{parentName:"ol"},"You need to know when the user is offline so that you can queue your server requests for a later time.")),Object(i.b)("p",null,"It is this process that online/offline events help to simplify."),Object(i.b)("h2",{id:"navigatoronline"},"NavigatorOnLine"),Object(i.b)("h3",{id:"navigatoronline-1"},Object(i.b)("inlineCode",{parentName:"h3"},"navigator.onLine")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"navigator.onLine")," is a property that maintains a ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"/",Object(i.b)("inlineCode",{parentName:"p"},"false")," value (",Object(i.b)("inlineCode",{parentName:"p"},"true")," for online, ",Object(i.b)("inlineCode",{parentName:"p"},"false"),' for offline). This property is updated whenever the user switches into "Offline Mode".'),Object(i.b)("p",null,"Additionally, this property should update whenever a browser is no longer capable of connecting to the network. According to the specification:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"navigator.onLine")," attribute must return false if the user agent will not contact the network when the user follows links or when a script requests a remote page (or knows that such an attempt would fail)...")),Object(i.b)("h3",{id:"online-and-offline-events"},Object(i.b)("inlineCode",{parentName:"h3"},"online")," and ",Object(i.b)("inlineCode",{parentName:"h3"},"offline")," events"),Object(i.b)("p",null,"You can register listeners for these events in a few familiar ways:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Using ",Object(i.b)("inlineCode",{parentName:"li"},"addEventListener")," on the ",Object(i.b)("inlineCode",{parentName:"li"},"window"),", ",Object(i.b)("inlineCode",{parentName:"li"},"document"),", or ",Object(i.b)("inlineCode",{parentName:"li"},"document.body")),Object(i.b)("li",{parentName:"ul"},"By setting the ",Object(i.b)("inlineCode",{parentName:"li"},".ononline")," or ",Object(i.b)("inlineCode",{parentName:"li"},".onoffline")," properties on ",Object(i.b)("inlineCode",{parentName:"li"},"document")," or ",Object(i.b)("inlineCode",{parentName:"li"},"document.body")," to a JavaScript ",Object(i.b)("inlineCode",{parentName:"li"},"Function")," object. (",Object(i.b)("strong",{parentName:"li"},"Note"),": using ",Object(i.b)("inlineCode",{parentName:"li"},"window.ononline")," or ",Object(i.b)("inlineCode",{parentName:"li"},"window.onoffline")," will not work for compatibility reasons.)"),Object(i.b)("li",{parentName:"ul"},"By specifying ",Object(i.b)("inlineCode",{parentName:"li"},'ononline="..."')," or ",Object(i.b)("inlineCode",{parentName:"li"},'onoffline="..."')," attributes on the ",Object(i.b)("inlineCode",{parentName:"li"},"<body>")," tag in the HTML markup.")),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'window.addEventListener(\'load\', function() {\n  let status = document.getElementById("status");\n  let log = document.getElementById("log");\n\n  function updateOnlineStatus(event) {\n    let condition = navigator.onLine ? "online" : "offline";\n\n    status.className = condition;\n    status.innerHTML = condition.toUpperCase();\n\n    log.insertAdjacentHTML("beforeend", "Event: " + event.type + "; Status: " + condition);\n  }\n\n  window.addEventListener(\'online\',  updateOnlineStatus);\n  window.addEventListener(\'offline\', updateOnlineStatus);\n});\n')),Object(i.b)("h2",{id:"network-information"},"Network Information"),Object(i.b)("p",null,"The Network Information API provides information about the system's connection in terms of general connection type (e.g., 'wifi', 'cellular', etc.). This can be used to select high definition content or low definition content based on the user's connection. The entire API consists of the addition of the ",Object(i.b)("inlineCode",{parentName:"p"},"NetworkInformation")," interface and a single property to the ",Object(i.b)("inlineCode",{parentName:"p"},"Navigator")," interface: ",Object(i.b)("inlineCode",{parentName:"p"},"Navigator.connection"),"."),Object(i.b)("h3",{id:"examples"},"Examples"),Object(i.b)("h4",{id:"detect-connection-changes"},"Detect connection changes"),Object(i.b)("p",null,"This example watches for changes to the user's connection."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\nvar type = connection.type;\n\nfunction updateConnectionStatus() {\n  console.log("Connection type changed from " + type + " to " + connection.type);\n}\n\nconnection.addEventListener(\'change\', updateConnectionStatus);\n')),Object(i.b)("h4",{id:"preload-large-resources"},"Preload large resources"),Object(i.b)("p",null,"The connection object is useful for deciding whether to preload resources that take large amounts of bandwidth or memory. This example would be called soon after page load to check for a connection type where preloading a video may not be desirable. If a cellular connection is found, then the preloadVideo flag is set to false. For simplicity and clarity, this example only tests for one connection type. A real-world use case would likely use a switch statement or some other method to check all of the possible values of ",Object(i.b)("inlineCode",{parentName:"p"},"NetworkInformation.type"),". Regardless of the type value you can get an estimate of connection speed through the ",Object(i.b)("inlineCode",{parentName:"p"},"NetworkInformation.effectiveType")," property."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let preloadVideo = true;\nvar connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\nif (connection) {\n  if (connection.type === 'cellular') {\n    preloadVideo = false;\n  }\n}\n")),Object(i.b)("h3",{id:"interfaces"},"Interfaces"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation"}),Object(i.b)("strong",{parentName:"a"},Object(i.b)("inlineCode",{parentName:"strong"},"NetworkInformation"))),Object(i.b)("br",{parentName:"li"}),"Provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes. The NetworkInformation interfaces cannot be instantiated. It is instead accessed through the ",Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Navigator"}),"Navigator")," interface.")))}p.isMDXComponent=!0},396:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,f=d["".concat(r,".").concat(u)]||d[u]||b[u]||i;return t?a.a.createElement(f,c(c({ref:n},s),{},{components:t})):a.a.createElement(f,c({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var s=2;s<i;s++)r[s]=t[s];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);